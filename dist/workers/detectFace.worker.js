"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")); // opencv.js tries to locate the wasms from the root by default.
// We changes the location by defining Module object.
//
// See: https://kripken.github.io/emscripten-site/docs/api_reference/module.html#Module.locateFile

global.Module = {
  locateFile: path => {
    const url = './opencv_js.wasm';
    log(`⬇️Downloading wasm from ${url}`);
    return url;
  } };


const cv = require('./opencv.js');
let classifier = null;

cv.onRuntimeInitialized = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
  log('📦OpenCV runtime loaded');
  init();
});function

createFileFromUrl(_x, _x2) {return _createFileFromUrl.apply(this, arguments);}function _createFileFromUrl() {_createFileFromUrl = (0, _asyncToGenerator2.default)(function* (path, url) {
    // Small function to make a remote file visible from emscripten module.

    log(`⬇️ Downloading additional file from ${url}.`);
    const res = yield self.fetch(url);
    if (!res.ok) {
      throw new Error(`Response is not OK (${res.status} ${res.statusText} for ${url})`);
    }
    const buffer = yield res.arrayBuffer();
    const data = new Uint8Array(buffer);
    cv.FS_createDataFile('/', path, data, true, true, false);
    log(`📦${url} downloaded. Mounted on /${path}`);
  });return _createFileFromUrl.apply(this, arguments);}function

init() {return _init.apply(this, arguments);}function _init() {_init = (0, _asyncToGenerator2.default)(function* () {
    yield createFileFromUrl('haarcascade_frontalface_default.xml',
    '/static/data/haarcascade_frontalface_default.xml');

    classifier = new cv.CascadeClassifier();
    classifier.load('haarcascade_frontalface_default.xml');

    // Let the UI that the module finished initialization
    self.postMessage({ type: 'init' });

    self.addEventListener('message', ({ data }) => {
      if (data.type === 'frame') {
        const faces = detectFaces(data.imageData);
        self.postMessage({ type: 'detect_faces', faces: faces });
      }
    });
  });return _init.apply(this, arguments);}

function detectFaces(imageData) {
  const img = cv.matFromImageData(imageData);
  const imgGray = new cv.Mat();

  const rect = [];
  cv.cvtColor(img, imgGray, cv.COLOR_RGBA2GRAY, 0);
  const faces = new cv.RectVector();
  const msize = new cv.Size(0, 0);
  classifier.detectMultiScale(imgGray, faces, 1.1, 3, 0, msize, msize);

  for (let i = 0; i < faces.size(); i++) {
    rect.push(faces.get(i));
  }

  img.delete();
  faces.delete();
  imgGray.delete();

  return rect;
}

function log(args) {
  self.postMessage({ type: 'log', args: Array.from(arguments) });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93b3JrZXJzL2RldGVjdEZhY2Uud29ya2VyLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsIk1vZHVsZSIsImxvY2F0ZUZpbGUiLCJwYXRoIiwidXJsIiwibG9nIiwiY3YiLCJyZXF1aXJlIiwiY2xhc3NpZmllciIsIm9uUnVudGltZUluaXRpYWxpemVkIiwiaW5pdCIsImNyZWF0ZUZpbGVGcm9tVXJsIiwicmVzIiwic2VsZiIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJidWZmZXIiLCJhcnJheUJ1ZmZlciIsImRhdGEiLCJVaW50OEFycmF5IiwiRlNfY3JlYXRlRGF0YUZpbGUiLCJDYXNjYWRlQ2xhc3NpZmllciIsImxvYWQiLCJwb3N0TWVzc2FnZSIsInR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwiZmFjZXMiLCJkZXRlY3RGYWNlcyIsImltYWdlRGF0YSIsImltZyIsIm1hdEZyb21JbWFnZURhdGEiLCJpbWdHcmF5IiwiTWF0IiwicmVjdCIsImN2dENvbG9yIiwiQ09MT1JfUkdCQTJHUkFZIiwiUmVjdFZlY3RvciIsIm1zaXplIiwiU2l6ZSIsImRldGVjdE11bHRpU2NhbGUiLCJpIiwic2l6ZSIsInB1c2giLCJnZXQiLCJkZWxldGUiLCJhcmdzIiwiQXJyYXkiLCJmcm9tIiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoidU1BQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUFBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQjtBQUNkQyxFQUFBQSxVQUFVLEVBQUdDLElBQUQsSUFBVTtBQUNsQixVQUFNQyxHQUFHLEdBQUcsa0JBQVo7QUFDQUMsSUFBQUEsR0FBRyxDQUFFLDJCQUEwQkQsR0FBSSxFQUFoQyxDQUFIO0FBQ0EsV0FBT0EsR0FBUDtBQUNILEdBTGEsRUFBaEI7OztBQVFBLE1BQU1FLEVBQUUsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBbEI7QUFDQSxJQUFJQyxVQUFVLEdBQUcsSUFBakI7O0FBRUFGLEVBQUUs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Q2lCLEdBQU4sQ0FBVUgsQ0FBVixDQUFWO0FBQ0g7O0FBRURYLEVBQUFBLEdBQUcsQ0FBQ2UsTUFBSjtBQUNBbEIsRUFBQUEsS0FBSyxDQUFDa0IsTUFBTjtBQUNBYixFQUFBQSxPQUFPLENBQUNhLE1BQVI7O0FBRUEsU0FBT1gsSUFBUDtBQUNEOztBQUVELFNBQVMvQixHQUFULENBQWEyQyxJQUFiLEVBQW1CO0FBQ2pCbkMsRUFBQUEsSUFBSSxDQUFDYSxXQUFMLENBQWlCLEVBQUVDLElBQUksRUFBRSxLQUFSLEVBQWVxQixJQUFJLEVBQUVDLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxTQUFYLENBQXJCLEVBQWpCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcGVuY3YuanMgdHJpZXMgdG8gbG9jYXRlIHRoZSB3YXNtcyBmcm9tIHRoZSByb290IGJ5IGRlZmF1bHQuXG4vLyBXZSBjaGFuZ2VzIHRoZSBsb2NhdGlvbiBieSBkZWZpbmluZyBNb2R1bGUgb2JqZWN0LlxuLy9cbi8vIFNlZTogaHR0cHM6Ly9rcmlwa2VuLmdpdGh1Yi5pby9lbXNjcmlwdGVuLXNpdGUvZG9jcy9hcGlfcmVmZXJlbmNlL21vZHVsZS5odG1sI01vZHVsZS5sb2NhdGVGaWxlXG5cbmdsb2JhbC5Nb2R1bGUgPSB7XG4gIGxvY2F0ZUZpbGU6IChwYXRoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSAnLi9vcGVuY3ZfanMud2FzbSc7XG4gICAgICBsb2coYOKsh++4j0Rvd25sb2FkaW5nIHdhc20gZnJvbSAke3VybH1gKTtcbiAgICAgIHJldHVybiB1cmw7XG4gIH1cbn07XG5cbmNvbnN0IGN2ID0gcmVxdWlyZSgnLi9vcGVuY3YuanMnKTtcbmxldCBjbGFzc2lmaWVyID0gbnVsbDtcblxuY3Yub25SdW50aW1lSW5pdGlhbGl6ZWQgPSBhc3luYyAoKSA9PiB7XG4gIGxvZygn8J+Tpk9wZW5DViBydW50aW1lIGxvYWRlZCcpO1xuICBpbml0KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVGaWxlRnJvbVVybChwYXRoLCB1cmwpIHtcbiAgLy8gU21hbGwgZnVuY3Rpb24gdG8gbWFrZSBhIHJlbW90ZSBmaWxlIHZpc2libGUgZnJvbSBlbXNjcmlwdGVuIG1vZHVsZS5cblxuICBsb2coYOKsh++4jyBEb3dubG9hZGluZyBhZGRpdGlvbmFsIGZpbGUgZnJvbSAke3VybH0uYCk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHNlbGYuZmV0Y2godXJsKTtcbiAgaWYgKCFyZXMub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVzcG9uc2UgaXMgbm90IE9LICgke3Jlcy5zdGF0dXN9ICR7cmVzLnN0YXR1c1RleHR9IGZvciAke3VybH0pYCk7XG4gIH1cbiAgY29uc3QgYnVmZmVyID0gYXdhaXQgcmVzLmFycmF5QnVmZmVyKCk7XG4gIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICBjdi5GU19jcmVhdGVEYXRhRmlsZSgnLycsIHBhdGgsIGRhdGEsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgbG9nKGDwn5OmJHt1cmx9IGRvd25sb2FkZWQuIE1vdW50ZWQgb24gLyR7cGF0aH1gKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgYXdhaXQgY3JlYXRlRmlsZUZyb21VcmwoJ2hhYXJjYXNjYWRlX2Zyb250YWxmYWNlX2RlZmF1bHQueG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJy9zdGF0aWMvZGF0YS9oYWFyY2FzY2FkZV9mcm9udGFsZmFjZV9kZWZhdWx0LnhtbCcpO1xuXG4gIGNsYXNzaWZpZXIgPSBuZXcgY3YuQ2FzY2FkZUNsYXNzaWZpZXIoKTtcbiAgY2xhc3NpZmllci5sb2FkKCdoYWFyY2FzY2FkZV9mcm9udGFsZmFjZV9kZWZhdWx0LnhtbCcpO1xuXG4gIC8vIExldCB0aGUgVUkgdGhhdCB0aGUgbW9kdWxlIGZpbmlzaGVkIGluaXRpYWxpemF0aW9uXG4gIHNlbGYucG9zdE1lc3NhZ2UoeyB0eXBlOiAnaW5pdCcgfSk7XG5cbiAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKHsgZGF0YSB9KSA9PiB7XG4gICAgICBpZiAoZGF0YS50eXBlID09PSAnZnJhbWUnKSB7XG4gICAgICAgICAgY29uc3QgZmFjZXMgPSBkZXRlY3RGYWNlcyhkYXRhLmltYWdlRGF0YSk7XG4gICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IHR5cGU6ICdkZXRlY3RfZmFjZXMnLCBmYWNlczogZmFjZXMgfSk7XG4gICAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RGYWNlcyhpbWFnZURhdGEpIHtcbiAgY29uc3QgaW1nID0gY3YubWF0RnJvbUltYWdlRGF0YShpbWFnZURhdGEpO1xuICBjb25zdCBpbWdHcmF5ID0gbmV3IGN2Lk1hdCgpO1xuXG4gIGNvbnN0IHJlY3QgPSBbXTtcbiAgY3YuY3Z0Q29sb3IoaW1nLCBpbWdHcmF5LCBjdi5DT0xPUl9SR0JBMkdSQVksIDApO1xuICBjb25zdCBmYWNlcyA9IG5ldyBjdi5SZWN0VmVjdG9yKCk7XG4gIGNvbnN0IG1zaXplID0gbmV3IGN2LlNpemUoMCwgMCk7XG4gIGNsYXNzaWZpZXIuZGV0ZWN0TXVsdGlTY2FsZShpbWdHcmF5LCBmYWNlcywgMS4xLCAzLCAwLCBtc2l6ZSwgbXNpemUpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZXMuc2l6ZSgpOyBpKyspIHtcbiAgICAgIHJlY3QucHVzaChmYWNlcy5nZXQoaSkpO1xuICB9XG5cbiAgaW1nLmRlbGV0ZSgpO1xuICBmYWNlcy5kZWxldGUoKTtcbiAgaW1nR3JheS5kZWxldGUoKTtcblxuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gbG9nKGFyZ3MpIHtcbiAgc2VsZi5wb3N0TWVzc2FnZSh7IHR5cGU6ICdsb2cnLCBhcmdzOiBBcnJheS5mcm9tKGFyZ3VtZW50cykgfSk7XG59XG4iXX0=