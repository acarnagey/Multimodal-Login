"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _dotenv = _interopRequireDefault(require("dotenv"));



var _bodyParser = _interopRequireDefault(require("body-parser"));
var _cors = _interopRequireDefault(require("cors"));

var _index = _interopRequireDefault(require("./routes/index"));
var _express = _interopRequireDefault(require("express"));
var _expressFileupload = _interopRequireDefault(require("express-fileupload"));

var _common = _interopRequireDefault(require("./common/common"));
var _MongoDbClient = _interopRequireDefault(require("./database/MongoDbClient"));
var _ejs = _interopRequireDefault(require("ejs"));
var _path = _interopRequireDefault(require("path"));_dotenv.default.config();const dbClient = new _MongoDbClient.default();

var fs = require("fs");
var https = require("https");

_common.default.dbClient = dbClient;

// https://stackoverflow.com/a/30355080/6907541
delete process.env.BROWSER;

const app = (0, _express.default)();

if (
process.env.ENVIRONMENT === "DEVELOPMENT" ||
process.env.ENVIRONMENT === "HEROKU")
{
  app.use((0, _cors.default)());
}
app.use(_bodyParser.default.json());
app.use(_bodyParser.default.urlencoded({ extended: true }));
app.use((0, _expressFileupload.default)({ useTempFiles: true }));

// View engine setup
app.set("views", _path.default.join(__dirname, "static", "views"));
app.set("view engine", "ejs");

// Middleware
app.use("/public", _express.default.static(_path.default.join(__dirname, "static", "public")));

app.use("/", _index.default);

// error handler
app.use(function (err, req, res, next) {
  console.log(err.stack);

  res.status(err.status || 500);

  res.json({
    errors: {
      message: err.message,
      error: err } });


});

const port = 5001;
let key;
let cert;
try {
  key = fs.readFileSync("/home/ubuntu/STAGING/CERTS/server-key.pem");
  cert = fs.readFileSync("/home/ubuntu/STAGING/CERTS/server-cert.pem");
} catch (err) {
  console.log("key or cert not available. Continuing... ");
}

if (key !== undefined && cert !== undefined) {
  https.
  createServer(
  {
    key: key,
    cert: cert },

  app).

  listen(port, function () {
    console.log(
    `app listening at http://localhost:${port} with https key + cert`);

  });
} else {
  const server = app.listen(process.env.PORT || port, function () {
    console.log("Oauth Server Listening on port " + server.address().port);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZG90ZW52IiwiY29uZmlnIiwiZGJDbGllbnQiLCJNb25nb0RiQ2xpZW50IiwiZnMiLCJyZXF1aXJlIiwiaHR0cHMiLCJjb21tb24iLCJwcm9jZXNzIiwiZW52IiwiQlJPV1NFUiIsImFwcCIsIkVOVklST05NRU5UIiwidXNlIiwiYm9keVBhcnNlciIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJ1c2VUZW1wRmlsZXMiLCJzZXQiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImV4cHJlc3MiLCJzdGF0aWMiLCJpbmRleCIsImVyciIsInJlcSIsInJlcyIsIm5leHQiLCJjb25zb2xlIiwibG9nIiwic3RhY2siLCJzdGF0dXMiLCJlcnJvcnMiLCJtZXNzYWdlIiwiZXJyb3IiLCJwb3J0Iiwia2V5IiwiY2VydCIsInJlYWRGaWxlU3luYyIsInVuZGVmaW5lZCIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsInNlcnZlciIsIlBPUlQiLCJhZGRyZXNzIl0sIm1hcHBpbmdzIjoia0dBQUE7Ozs7QUFJQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFiQUEsZ0JBQU9DLE1BQVAsR0FFQSxNQUFNQyxRQUFRLEdBQUcsSUFBSUMsc0JBQUosRUFBakI7O0FBYUEsSUFBSUMsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFoQjtBQUNBLElBQUlDLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFFLGdCQUFPTCxRQUFQLEdBQWtCQSxRQUFsQjs7QUFFQTtBQUNBLE9BQU9NLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxPQUFuQjs7QUFFQSxNQUFNQyxHQUFHLEdBQUcsdUJBQVo7O0FBRUE7QUFDRUgsT0FBTyxDQUFDQyxHQUFSLENBQVlHLFdBQVosS0FBNEIsYUFBNUI7QUFDQUosT0FBTyxDQUFDQyxHQUFSLENBQVlHLFdBQVosS0FBNEIsUUFGOUI7QUFHRTtBQUNBRCxFQUFBQSxHQUFHLENBQUNFLEdBQUosQ0FBUSxvQkFBUjtBQUNEO0FBQ0RGLEdBQUcsQ0FBQ0UsR0FBSixDQUFRQyxvQkFBV0MsSUFBWCxFQUFSO0FBQ0FKLEdBQUcsQ0FBQ0UsR0FBSixDQUFRQyxvQkFBV0UsVUFBWCxDQUFzQixFQUFFQyxRQUFRLEVBQUUsSUFBWixFQUF0QixDQUFSO0FBQ0FOLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLGdDQUFXLEVBQUVLLFlBQVksRUFBRSxJQUFoQixFQUFYLENBQVI7O0FBRUE7QUFDQVAsR0FBRyxDQUFDUSxHQUFKLENBQVEsT0FBUixFQUFpQkMsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLEVBQStCLE9BQS9CLENBQWpCO0FBQ0FYLEdBQUcsQ0FBQ1EsR0FBSixDQUFRLGFBQVIsRUFBdUIsS0FBdkI7O0FBRUE7QUFDQVIsR0FBRyxDQUFDRSxHQUFKLENBQVEsU0FBUixFQUFtQlUsaUJBQVFDLE1BQVIsQ0FBZUosY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLEVBQStCLFFBQS9CLENBQWYsQ0FBbkI7O0FBRUFYLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLEdBQVIsRUFBYVksY0FBYjs7QUFFQTtBQUNBZCxHQUFHLENBQUNFLEdBQUosQ0FBUSxVQUFVYSxHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLEdBQXBCLEVBQXlCQyxJQUF6QixFQUErQjtBQUNyQ0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlMLEdBQUcsQ0FBQ00sS0FBaEI7O0FBRUFKLEVBQUFBLEdBQUcsQ0FBQ0ssTUFBSixDQUFXUCxHQUFHLENBQUNPLE1BQUosSUFBYyxHQUF6Qjs7QUFFQUwsRUFBQUEsR0FBRyxDQUFDYixJQUFKLENBQVM7QUFDUG1CLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxPQUFPLEVBQUVULEdBQUcsQ0FBQ1MsT0FEUDtBQUVOQyxNQUFBQSxLQUFLLEVBQUVWLEdBRkQsRUFERCxFQUFUOzs7QUFNRCxDQVhEOztBQWFBLE1BQU1XLElBQUksR0FBRyxJQUFiO0FBQ0EsSUFBSUMsR0FBSjtBQUNBLElBQUlDLElBQUo7QUFDQSxJQUFJO0FBQ0ZELEVBQUFBLEdBQUcsR0FBR2xDLEVBQUUsQ0FBQ29DLFlBQUgsQ0FBZ0IsMkNBQWhCLENBQU47QUFDQUQsRUFBQUEsSUFBSSxHQUFHbkMsRUFBRSxDQUFDb0MsWUFBSCxDQUFnQiw0Q0FBaEIsQ0FBUDtBQUNELENBSEQsQ0FHRSxPQUFPZCxHQUFQLEVBQVk7QUFDWkksRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksMkNBQVo7QUFDRDs7QUFFRCxJQUFJTyxHQUFHLEtBQUtHLFNBQVIsSUFBcUJGLElBQUksS0FBS0UsU0FBbEMsRUFBNkM7QUFDM0NuQyxFQUFBQSxLQUFLO0FBQ0ZvQyxFQUFBQSxZQURIO0FBRUk7QUFDRUosSUFBQUEsR0FBRyxFQUFFQSxHQURQO0FBRUVDLElBQUFBLElBQUksRUFBRUEsSUFGUixFQUZKOztBQU1JNUIsRUFBQUEsR0FOSjs7QUFRR2dDLEVBQUFBLE1BUkgsQ0FRVU4sSUFSVixFQVFnQixZQUFZO0FBQ3hCUCxJQUFBQSxPQUFPLENBQUNDLEdBQVI7QUFDRyx5Q0FBb0NNLElBQUssd0JBRDVDOztBQUdELEdBWkg7QUFhRCxDQWRELE1BY087QUFDTCxRQUFNTyxNQUFNLEdBQUdqQyxHQUFHLENBQUNnQyxNQUFKLENBQVduQyxPQUFPLENBQUNDLEdBQVIsQ0FBWW9DLElBQVosSUFBb0JSLElBQS9CLEVBQXFDLFlBQVk7QUFDOURQLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9DQUFvQ2EsTUFBTSxDQUFDRSxPQUFQLEdBQWlCVCxJQUFqRTtBQUNELEdBRmMsQ0FBZjtBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5kb3RlbnYuY29uZmlnKCk7XG5cbmNvbnN0IGRiQ2xpZW50ID0gbmV3IE1vbmdvRGJDbGllbnQoKTtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcblxuaW1wb3J0IGluZGV4IGZyb20gXCIuL3JvdXRlcy9pbmRleFwiO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBmaWxlVXBsb2FkIGZyb20gXCJleHByZXNzLWZpbGV1cGxvYWRcIjtcblxuaW1wb3J0IGNvbW1vbiBmcm9tIFwiLi9jb21tb24vY29tbW9uXCI7XG5pbXBvcnQgTW9uZ29EYkNsaWVudCBmcm9tIFwiLi9kYXRhYmFzZS9Nb25nb0RiQ2xpZW50XCI7XG5pbXBvcnQgZWpzIGZyb20gXCJlanNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbnZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoXCJodHRwc1wiKTtcblxuY29tbW9uLmRiQ2xpZW50ID0gZGJDbGllbnQ7XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDM1NTA4MC82OTA3NTQxXG5kZWxldGUgcHJvY2Vzcy5lbnYuQlJPV1NFUjtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5pZiAoXG4gIHByb2Nlc3MuZW52LkVOVklST05NRU5UID09PSBcIkRFVkVMT1BNRU5UXCIgfHxcbiAgcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgPT09IFwiSEVST0tVXCJcbikge1xuICBhcHAudXNlKGNvcnMoKSk7XG59XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuYXBwLnVzZShmaWxlVXBsb2FkKHsgdXNlVGVtcEZpbGVzOiB0cnVlIH0pKTtcblxuLy8gVmlldyBlbmdpbmUgc2V0dXBcbmFwcC5zZXQoXCJ2aWV3c1wiLCBwYXRoLmpvaW4oX19kaXJuYW1lLCBcInN0YXRpY1wiLCBcInZpZXdzXCIpKTtcbmFwcC5zZXQoXCJ2aWV3IGVuZ2luZVwiLCBcImVqc1wiKTtcblxuLy8gTWlkZGxld2FyZVxuYXBwLnVzZShcIi9wdWJsaWNcIiwgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgXCJzdGF0aWNcIiwgXCJwdWJsaWNcIikpKTtcblxuYXBwLnVzZShcIi9cIiwgaW5kZXgpO1xuXG4vLyBlcnJvciBoYW5kbGVyXG5hcHAudXNlKGZ1bmN0aW9uIChlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG5cbiAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XG5cbiAgcmVzLmpzb24oe1xuICAgIGVycm9yczoge1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBlcnJvcjogZXJyLFxuICAgIH0sXG4gIH0pO1xufSk7XG5cbmNvbnN0IHBvcnQgPSA1MDAxO1xubGV0IGtleTtcbmxldCBjZXJ0O1xudHJ5IHtcbiAga2V5ID0gZnMucmVhZEZpbGVTeW5jKFwiL2hvbWUvdWJ1bnR1L1NUQUdJTkcvQ0VSVFMvc2VydmVyLWtleS5wZW1cIik7XG4gIGNlcnQgPSBmcy5yZWFkRmlsZVN5bmMoXCIvaG9tZS91YnVudHUvU1RBR0lORy9DRVJUUy9zZXJ2ZXItY2VydC5wZW1cIik7XG59IGNhdGNoIChlcnIpIHtcbiAgY29uc29sZS5sb2coXCJrZXkgb3IgY2VydCBub3QgYXZhaWxhYmxlLiBDb250aW51aW5nLi4uIFwiKTtcbn1cblxuaWYgKGtleSAhPT0gdW5kZWZpbmVkICYmIGNlcnQgIT09IHVuZGVmaW5lZCkge1xuICBodHRwc1xuICAgIC5jcmVhdGVTZXJ2ZXIoXG4gICAgICB7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBjZXJ0OiBjZXJ0LFxuICAgICAgfSxcbiAgICAgIGFwcFxuICAgIClcbiAgICAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgYXBwIGxpc3RlbmluZyBhdCBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0gd2l0aCBodHRwcyBrZXkgKyBjZXJ0YFxuICAgICAgKTtcbiAgICB9KTtcbn0gZWxzZSB7XG4gIGNvbnN0IHNlcnZlciA9IGFwcC5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCB8fCBwb3J0LCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coXCJPYXV0aCBTZXJ2ZXIgTGlzdGVuaW5nIG9uIHBvcnQgXCIgKyBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQpO1xuICB9KTtcbn1cbiJdfQ==