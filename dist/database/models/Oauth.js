"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _OAuthClient = _interopRequireDefault(require("./OAuthClient"));
var _OAuthAuthorizationCode = _interopRequireDefault(require("./OAuthAuthorizationCode"));
var _OAuthToken = _interopRequireDefault(require("./OAuthToken"));
var _OAuthUser = _interopRequireDefault(require("./OAuthUser"));
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _ip = _interopRequireDefault(require("ip"));

const getAccessToken = /*#__PURE__*/function () {var _ref = (0, _asyncToGenerator2.default)(function* (bearerToken) {
    const oathToken = yield _OAuthToken.default.findOne({
      accessToken: bearerToken }).
    lean();

    return oathToken;
  });return function getAccessToken(_x) {return _ref.apply(this, arguments);};}();

const getRefreshToken = /*#__PURE__*/function () {var _ref2 = (0, _asyncToGenerator2.default)(function* (refreshToken) {
    let token = yield _OAuthToken.default.findOne({
      refreshToken: refreshToken }).
    lean();

    return token;
  });return function getRefreshToken(_x2) {return _ref2.apply(this, arguments);};}();

const getAuthorizationCode = /*#__PURE__*/function () {var _ref3 = (0, _asyncToGenerator2.default)(function* (authorizationCode) {
    const authCode = yield _OAuthAuthorizationCode.default.findOne({
      authorizationCode }).

    populate("client").
    populate("user").
    lean();

    return authCode;
  });return function getAuthorizationCode(_x3) {return _ref3.apply(this, arguments);};}();

const getClient = /*#__PURE__*/function () {var _ref4 = (0, _asyncToGenerator2.default)(function* (clientId, clientSecret) {
    const oathClient = yield _OAuthClient.default.findOne({
      clientId: clientId,
      clientSecret: clientSecret }).
    lean();

    return oathClient;
  });return function getClient(_x4, _x5) {return _ref4.apply(this, arguments);};}();

const getUser = /*#__PURE__*/function () {var _ref5 = (0, _asyncToGenerator2.default)(function* (_id) {
    const user = yield _OAuthUser.default.findOne({
      _id }).
    lean();

    return user;
  });return function getUser(_x6) {return _ref5.apply(this, arguments);};}();

const saveToken = /*#__PURE__*/function () {var _ref6 = (0, _asyncToGenerator2.default)(function* (token, client, user) {
    const accessToken = new _OAuthToken.default({
      accessToken: token.accessToken,
      accessTokenExpiresAt: token.accessTokenExpiresAt,
      client: client,
      clientId: client.clientId,
      refreshToken: token.refreshToken,
      refreshTokenExpiresAt: token.refreshTokenExpiresAt,
      user: user,
      userId: user._id });


    // Can't just chain `lean()` to `save()` as we did with `findOne()` elsewhere. Instead we use `Promise` to resolve the data.
    let saveResult = yield accessToken.save();

    let expirationTime = parseInt(token.accessTokenExpiresAt.getTime() / 1000); // expiration time, seconds since unix epoch

    const accessJWT = _jsonwebtoken.default.sign(
    {
      sub: user._id, // subject, whom the token refers to
      oauthId: user.oauthId,
      // event_id: '',
      token_use: "access",
      scope: user.role,
      auth_time: parseInt(new Date().getTime() / 1000), // time when authetication occurred
      // TODO: change this to actuall origin it's running on
      iss: _ip.default.address(), // issuer, who created and signed this token
      exp: expirationTime,
      jti: saveResult._id, // jwt id unique identifier for this token
      client_id: clearInterval.clientId,
      username: user.username,
      phoneNumber: user.phoneNumber,
      didAddress: user.didAddress,
      didPublicEncryptionKey: user.didPublicEncryptionKey },

    process.env.AUTH_SECRET);


    saveResult.accessToken = accessJWT;
    saveResult = yield accessToken.save();

    // `saveResult` is mongoose wrapper object, not doc itself. Calling `toJSON()` returns the doc.
    saveResult =
    saveResult && typeof saveResult == "object" ?
    saveResult.toJSON() :
    saveResult;

    // Unsure what else points to `saveResult` in oauth2-server, making copy to be safe
    const data = new Object();
    for (const prop in saveResult) data[prop] = saveResult[prop];
    // /oauth-server/lib/models/token-model.js complains if missing `client` and `user`. Creating missing properties.
    data.client = data.clientId;
    data.user = data.userId;

    return data;
  });return function saveToken(_x7, _x8, _x9) {return _ref6.apply(this, arguments);};}();

const saveAuthorizationCode = /*#__PURE__*/function () {var _ref7 = (0, _asyncToGenerator2.default)(function* (code, client, user) {
    const authCode = new _OAuthAuthorizationCode.default({
      authorizationCode: code.authorizationCode,
      expiresAt: code.expiresAt,
      redirectUri: code.redirectUri,
      // scope: code.scope, // you can use this to specify permissions
      clientId: client.clientId,
      userId: user._id });

    const clientSaved = yield getClient(client.clientId, client.clientSecret);
    const userSaved = yield getUser(user._id);
    authCode.client = clientSaved;
    authCode.user = userSaved;

    let saveResult = yield authCode.save();
    saveResult =
    saveResult && typeof saveResult == "object" ?
    saveResult.toJSON() :
    saveResult;
    const data = new Object();
    for (const prop in saveResult) data[prop] = saveResult[prop];

    return data;
  });return function saveAuthorizationCode(_x10, _x11, _x12) {return _ref7.apply(this, arguments);};}();

const revokeAuthorizationCode = /*#__PURE__*/function () {var _ref8 = (0, _asyncToGenerator2.default)(function* (code) {
    yield _OAuthAuthorizationCode.default.deleteMany({
      authorizationCode: code.authorizationCode });

    return true;
  });return function revokeAuthorizationCode(_x13) {return _ref8.apply(this, arguments);};}();var _default =

{
  getAccessToken,
  getRefreshToken,
  getAuthorizationCode,
  getClient,
  getUser,
  saveToken,
  saveAuthorizationCode,
  revokeAuthorizationCode };exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,